{"version":3,"sources":["logo.jpg","firebase.js","Header.js","Main.js","Bag.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Header","state","count","className","icon","faShoppingBag","src","image","alt","Component","Main","handleClick","chosenCake","chosenCakeId","cakePrice","cartRef","push","removeCake","unwantedCakeId","child","remove","dbRef","database","ref","cakes","userBag","total","this","on","response","newState","data","val","key","store","cake","id","setState","newBag","dataFromUserBag","price","newTotal","map","value","console","log","item","name","onClick","length","faTimesCircle","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.42278f71.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.7e841cd3.jpg\";","import firebase from 'firebase/app';\nimport 'firebase/database';\n\n\n  // Your web app's Firebase configuration\n  const firebaseConfig = {\n    apiKey: \"AIzaSyBTCK4vDsDPy7QORKwccUNTSlKuEsTsC_o\",\n    authDomain: \"desserts-corner.firebaseapp.com\",\n    databaseURL: \"https://desserts-corner.firebaseio.com\",\n    projectId: \"desserts-corner\",\n    storageBucket: \"desserts-corner.appspot.com\",\n    messagingSenderId: \"596476269546\",\n    appId: \"1:596476269546:web:0298aec07519180a239893\"\n  };\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n\n  export default firebase;","import React, { Component } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faShoppingBag } from '@fortawesome/free-solid-svg-icons';\n\nimport image from './logo.jpg';\n\nclass Header extends Component {\n    constructor() {\n        super();\n        this.state = {\n            count: 0\n        }\n    }\n  render() {\n    return (\n        <header>\n            <div className=\"wrapper\">\n                <nav>\n                    <button>\n                        <FontAwesomeIcon icon={faShoppingBag} />\n                        <p>0</p>\n                    </button>\n                </nav>\n                <div className=\"headerImage\">\n                    <img src={image} alt=\"Bakery Logo\"/>\n                </div>\n                <h1>Life is short! Eat dessert first!</h1>\n            </div>\n        </header>\n    )\n    \n  }\n}\n\n\n    \n\n\nexport default Header;\n\n","import React, {Component} from 'react';\nimport firebase from './firebase';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimesCircle } from '@fortawesome/free-solid-svg-icons';\n\nimport Bag from './Bag';\n\n\nclass Main extends Component {\nconstructor() {\n    super();\n    this.state = {\n      dbRef: firebase.database().ref(),\n      cartRef: firebase.database().ref('userCart'),\n      cakes: [],\n      userBag: [],\n      total: 0,\n    }\n  }\ncomponentDidMount() {\n\n    this.state.dbRef.on('value', (response) => {\n        const newState = [];\n        const data = response.val();\n        for (let key in data.store) {\n            newState.push({\n                cake: data.store[key],\n                id: key,\n            })\n        }\n        this.setState({\n            cakes: newState,\n        })\n    })\n    //--------------\n    this.state.cartRef.on('value', (response) => {\n    const newBag = [];\n    const dataFromUserBag = response.val();\n    // console.log(dataFromUserBag);\n    for (let key in dataFromUserBag) {\n      newBag.push({\n        cake: dataFromUserBag[key],\n        id: key,\n        price: dataFromUserBag[key].price\n      })\n    }\n\n    const newTotal = newBag.map(value => {\n      return value.price;\n    })\n    console.log(newTotal);\n    this.setState ({\n      userBag: newBag,\n       \n    })\n    // console.log(newBag);\n  })\n}\n//--------------\nhandleClick = (chosenCake, chosenCakeId, cakePrice) => {\n  this.state.cartRef.push(chosenCake);\n  \n}\n//--------------\nremoveCake = (unwantedCakeId) => {\n  this.state.cartRef.child(unwantedCakeId).remove();\n}\n\n//--------------\n  render() {\n    return (\n      <main>\n          <div className=\"wrapper\">\n            <ul className=\"storeCakes\">\n                {this.state.cakes.map(item => {\n                    return (\n                        <li key={item.id}>\n                            <img src={item.cake.image} alt={item.cake.name}/>\n                            <p>{item.cake.name}</p>\n                            <p>${item.cake.price}</p>\n                            <button \n                            onClick={() => this.handleClick(item.cake, item.id, item.cake.price)}>\n                            Add to Cart\n                            </button>\n                        </li>\n                    )\n                })}\n            </ul>\n            {/* <Bag /> */}\n            <div className=\"userCakes\">\n                <p>You have {this.state.userBag.length} items in your bags</p>\n                <ul>\n                  {this.state.userBag.map(item => {\n                    return (\n                      <li key={item.id}>\n                            <img src={item.cake.image} alt={item.cake.name}/>\n                            <div className=\"bagText\">\n                              <p>{item.cake.name}</p>\n                              <p>${item.cake.price}</p>\n                            </div>\n                            <button onClick={() => this.removeCake(item.id)} className=\"deleteButton\">\n                                <FontAwesomeIcon icon={faTimesCircle} />\n                            </button>\n                      </li>\n                    )\n                  })}\n                <p>Total: {this.state.total}</p>\n                </ul>\n            </div>\n          </div>\n      </main>\n    );\n  }\n}\n\nexport default Main;","import React, {Component} from 'react';\nimport firebase from './firebase';\n\n\nclass Bag extends Component {\n    constructor() {\n        super();\n        \n    }\n  render() {\n    return (\n      <div className=\"bag\">\n          <p>You have 0 items in your bags</p>\n      </div>\n    );\n  }\n}\nexport default Bag;","import React from 'react';\n\nconst Footer = () => {\n    return (\n        <footer>\n            <div className=\"wrapper\">\n                <p>Copyright anhthuydang 2020</p>\n            </div>\n        </footer>\n    )\n}\n\n\nexport default Footer;","import React, { Component } from 'react';\nimport firebase from './firebase';\n\n\nimport Header from './Header';\nimport Main from './Main';\nimport Footer from './Footer';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <Header />\n        <Main />\n        <Footer />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}