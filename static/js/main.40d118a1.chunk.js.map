{"version":3,"sources":["logo.jpg","Header.js","firebase.js","Bag.js","BagButton.js","Main.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","image","alt","Component","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Bag","this","props","handleHideBag","userBag","removeCake","total","onClick","icon","faArrowLeft","length","map","item","index","key","name","price","faTimesCircle","href","BagButton","handleShowBag","faShoppingBag","Main","displayAll","state","dbRef","on","response","allItems","data","val","type","push","product","id","setState","inventory","displayBreads","breads","bread","displayCakes","cakecake","cake","handleAddToBag","chosenCake","updatedBag","newTotal","reduce","a","b","cakeIndex","filteredBag","filter","database","ref","role","aria-label","isBagShown","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.40d118a1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.7e841cd3.jpg\";","import React, { Component } from 'react';\nimport image from './logo.jpg';\n\nclass Header extends Component {\n  render() {\n    return (\n        <header>\n            <div className=\"wrapper\">\n                <nav>\n                </nav>\n                <div className=\"headerImage\">\n                    <img src={image} alt=\"Bakery Logo\"/>\n                </div>\n                <h1>Life is short!</h1>\n                <h2>Eat dessert first!</h2>\n            </div>\n        </header>\n    )\n  }\n}\nexport default Header;\n\n","import firebase from 'firebase/app';\nimport 'firebase/database';\n\n  // Your web app's Firebase configuration\n  const firebaseConfig = {\n    apiKey: \"AIzaSyBTCK4vDsDPy7QORKwccUNTSlKuEsTsC_o\",\n    authDomain: \"desserts-corner.firebaseapp.com\",\n    databaseURL: \"https://desserts-corner.firebaseio.com\",\n    projectId: \"desserts-corner\",\n    storageBucket: \"desserts-corner.appspot.com\",\n    messagingSenderId: \"596476269546\",\n    appId: \"1:596476269546:web:0298aec07519180a239893\"\n  };\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n\n  export default firebase;","import React, {Component} from 'react';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowLeft, faTimesCircle } from '@fortawesome/free-solid-svg-icons';\n\nclass Bag extends Component {\n  render() {\n    const {handleHideBag, userBag, removeCake, total} = this.props;\n    return (\n      <div className=\"userCakes\">\n        <button className=\"goBackButton\" onClick={handleHideBag}>\n          <FontAwesomeIcon icon={faArrowLeft} />\n        </button>\n        <p>You have {userBag.length} {userBag.length === 0 ? \"item\" : \"items\"} in your bag</p>\n        <ul>\n          {userBag.map((item, index) => {\n            return (\n              <li key={index} index={index}>\n                    <img src={item.image} alt={item.name}/>\n                    <div className=\"bagText\">\n                      <p>{item.name}</p>\n                      <p>${item.price}</p>\n                    </div>\n                    <button onClick={() => {removeCake(index)}} className=\"deleteButton\">\n                        <FontAwesomeIcon icon={faTimesCircle} />\n                    </button>\n              </li>\n            )\n          })}\n        <p className=\"total\">Total: ${total}</p>\n        <button className=\"checkOutButton\"><a href=\"https://www.facebook.com/desserts.corner96\">Check Out</a></button>\n        </ul>\n      </div>\n    );\n  }\n}\nexport default Bag;","import React, {Component} from 'react';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faShoppingBag } from '@fortawesome/free-solid-svg-icons';\n\nclass BagButton extends Component {\n  render() {\n    const {handleShowBag, userBag} = this.props;\n    return (\n        <div className=\"bagButtonContainer\">\n            <button className=\"bagButton\" onClick={handleShowBag}>\n                <FontAwesomeIcon icon={faShoppingBag} />\n                <p>{userBag.length}</p>\n            </button>\n        </div>\n    );\n  }\n}\nexport default BagButton;","import React, {Component} from 'react';\nimport firebase from './firebase';\n\nimport Bag from './Bag';\nimport BagButton from './BagButton';\n\nclass Main extends Component {\nconstructor() {\n    super();\n    this.state = {\n      dbRef: firebase.database().ref(),\n      inventory: [],\n      userBag: [],\n      total: 0,\n    }\n  }\n\n// display all items on the page\ndisplayAll = () => {\n  this.state.dbRef.on('value', (response) => {\n    const allItems = [];\n    const data = response.val();\n    //loop through types of items\n    for (let type in data) {\n      //loop through every item of each type and add items to array\n      for (let key in data[type]) {\n        allItems.push({\n            product: data[type][key],\n            id: key,\n        })\n      }\n    } \n    //set state of inventory to show all items\n    this.setState({\n        inventory: allItems,\n    })\n  })\n}\n\n//render items on the page at default\ncomponentDidMount() {\n  this.displayAll();\n}\n\n//function to display breads only\ndisplayBreads = () => {\n  this.state.dbRef.on('value', (response) => {\n    const breads = [];\n    const data = response.val();\n    //loop through each item in bread category and add those breads to an array\n    for (let key in data.bread) {\n          breads.push({\n              product: data.bread[key],\n              id: key,\n          })\n      }\n    //set state of inventory to show only breads\n    this.setState({\n      inventory: breads,\n    })\n    \n  })\n}\n\n//function to display cakes only\ndisplayCakes = () => {\n  this.state.dbRef.on('value', (response) => {\n    const cakecake = [];\n    const data = response.val();\n    //loop through each item in cake category and add those cakes to an array\n    for (let key in data.cake) {\n          cakecake.push({\n              product: data.cake[key],\n              id: key,\n          })\n      }\n    //set state of inventory to show only cakes\n    this.setState({\n      inventory: cakecake,\n    })\n    \n  })\n}\n\n//add items to shopping bag and calculate total price\nhandleAddToBag = (chosenCake) => {\n  const updatedBag = [...this.state.userBag];\n  updatedBag.push(chosenCake);\n\n  //map out an array of current item prices to calculate sum\n  const newTotal = updatedBag.map((item) => {\n    return item.price;\n  }).reduce((a,b) => a + b, 0);\n\n  this.setState ({\n    userBag: updatedBag,\n    total: newTotal\n  })\n}\n\n//remove product from shopping bag and calculate total price again\nremoveCake = (cakeIndex) => {\n  const updatedBag = [...this.state.userBag];\n  //filter shopping bag array and only return remaining items (except the item was clicked)\n  const filteredBag = updatedBag.filter((item,index) => {\n    return (index !== cakeIndex);\n  });\n\n  //map out an array of current item prices to calculate sum\n  const newTotal = filteredBag.map((item) => {\n    return item.price;\n  }).reduce((a,b) => a + b, 0);\n\n  this.setState ({\n    userBag: filteredBag,\n    total: newTotal\n  })\n}\n\n  render() {\n    return (\n      <main>\n          <div className=\"wrapper\">\n            <ul className=\"category\">\n              <li><button onClick={this.displayAll}>All <span role=\"img\" aria-label=\"all\">👩🏻‍🍳</span></button></li>\n              <li><button onClick={this.displayBreads}>Bread <span role=\"img\" aria-label=\"bread\">🍞</span></button></li>\n              <li><button onClick={this.displayCakes}>Cake <span role=\"img\" aria-label=\"cake\">🍰</span></button></li>\n            </ul>\n            {/* <h3>UNDER CONSTRUCTION (adding more features)</h3> */}\n            <ul className=\"storeCakes\">\n                {this.state.inventory.map(item => {\n                    return (\n                        <li key={item.product.name}>\n                            <img src={item.product.image} alt={item.product.name}/>\n                            <p>{item.product.name}</p>\n                            <p>${item.product.price}</p>\n                            <button \n                            onClick={() => this.handleAddToBag(item.product)}>\n                            Add\n                            </button>\n                        </li>\n                    )\n                })}\n            </ul>\n\n            <BagButton \n            handleShowBag={this.props.handleShowBag}\n            userBag={this.state.userBag}  \n            />\n            \n            {/* if isBagShown is true, show the Bag, if false, show nothing */}\n            {this.props.isBagShown ? \n            <Bag\n            handleHideBag={this.props.handleHideBag} \n            userBag={this.state.userBag} \n            removeCake={this.removeCake}\n            total={this.state.total} \n            /> : null }\n          </div>\n      </main>\n    );\n  }\n}\n\nexport default Main;","import React from 'react';\n\nconst Footer = () => {\n    return (\n        <footer>\n            <div className=\"wrapper\">\n                <p>Copyright anhthuydang 2020</p>\n            </div>\n        </footer>\n    )\n}\nexport default Footer;","import React, { Component } from 'react';\n\nimport Header from './Header';\nimport Main from './Main';\nimport Footer from './Footer';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      isBagShown: false,\n    }\n  }\n  \n  handleShowBag = () => {\n    let showBag = true;\n    this.setState ({\n      isBagShown: showBag,\n    })\n  }\n\n  handleHideBag = () => {\n    let hideBag = false;\n    this.setState ({\n      isBagShown: hideBag,\n    })\n  }\n\n  render() {\n    return (\n      <>\n        <Header />\n        <Main \n        isBagShown={this.state.isBagShown}\n        handleShowBag={this.handleShowBag}\n        handleHideBag={this.handleHideBag}/>\n        <Footer />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}