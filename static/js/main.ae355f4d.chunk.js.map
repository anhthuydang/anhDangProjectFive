{"version":3,"sources":["logo.jpg","Header.js","firebase.js","Bag.js","BagButton.js","Main.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","image","alt","Component","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Bag","this","props","handleHideBag","userBag","removeCake","total","onClick","icon","faArrowLeft","length","map","item","key","id","cake","name","price","faTimesCircle","BagButton","handleShowBag","faShoppingBag","Main","handleAddToBag","chosenCake","state","bagRef","push","unwantedCakeId","child","remove","dbRef","database","ref","cakes","on","response","newState","data","val","store","setState","newBag","dataFromUserBag","newTotal","value","reduce","a","b","isBagShown","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ae355f4d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.7e841cd3.jpg\";","import React, { Component } from 'react';\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n// import { faShoppingBag } from '@fortawesome/free-solid-svg-icons';\n\nimport image from './logo.jpg';\n\n\nclass Header extends Component {\n  render() {\n    //   const {handleShowBag} = this.props;\n    return (\n        <header>\n            <div className=\"wrapper\">\n                <nav>\n                </nav>\n                <div className=\"headerImage\">\n                    <img src={image} alt=\"Bakery Logo\"/>\n                </div>\n                <h1>Life is short! Eat dessert first!</h1>\n            </div>\n        </header>\n    )\n    \n  }\n}\n\n\n    \n\n\nexport default Header;\n\n","import firebase from 'firebase/app';\nimport 'firebase/database';\n\n\n  // Your web app's Firebase configuration\n  const firebaseConfig = {\n    apiKey: \"AIzaSyBTCK4vDsDPy7QORKwccUNTSlKuEsTsC_o\",\n    authDomain: \"desserts-corner.firebaseapp.com\",\n    databaseURL: \"https://desserts-corner.firebaseio.com\",\n    projectId: \"desserts-corner\",\n    storageBucket: \"desserts-corner.appspot.com\",\n    messagingSenderId: \"596476269546\",\n    appId: \"1:596476269546:web:0298aec07519180a239893\"\n  };\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n\n  export default firebase;","import React, {Component} from 'react';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowLeft, faTimesCircle } from '@fortawesome/free-solid-svg-icons';\n\n\n\nclass Bag extends Component {\n  render() {\n    const {handleHideBag, userBag, removeCake, total} = this.props;\n    return (\n      <div className=\"userCakes\">\n        <button className=\"goBackButton\" onClick={handleHideBag}>\n          <FontAwesomeIcon icon={faArrowLeft} />\n        </button>\n        <p>You have {userBag.length} items in your bags</p>\n        <ul>\n          {userBag.map(item => {\n            return (\n              <li key={item.id}>\n                    <img src={item.cake.image} alt={item.cake.name}/>\n                    <div className=\"bagText\">\n                      <p>{item.cake.name}</p>\n                      <p>${item.cake.price}</p>\n                    </div>\n                    <button onClick={() => removeCake(item.id)} className=\"deleteButton\">\n                        <FontAwesomeIcon icon={faTimesCircle} />\n                    </button>\n              </li>\n            )\n          })}\n        <p>Total: ${total}</p>\n        </ul>\n      </div>\n    );\n  }\n}\nexport default Bag;","import React, {Component} from 'react';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faShoppingBag } from '@fortawesome/free-solid-svg-icons';\n\n\nclass BagButton extends Component {\n  render() {\n    const {handleShowBag, userBag} = this.props;\n    return (\n        <div className=\"bagButtonContainer\">\n            <button className=\"bagButton\" onClick={handleShowBag}>\n                <FontAwesomeIcon icon={faShoppingBag} />\n                <p>{userBag.length}</p>\n            </button>\n        </div>\n    );\n  }\n}\nexport default BagButton;","import React, {Component} from 'react';\nimport firebase from './firebase';\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n// import { faTimesCircle } from '@fortawesome/free-solid-svg-icons';\n\nimport Bag from './Bag';\nimport BagButton from './BagButton';\n\n\nclass Main extends Component {\nconstructor() {\n    super();\n    this.state = {\n      dbRef: firebase.database().ref(),\n      bagRef: firebase.database().ref('userBag'),\n      cakes: [],\n      userBag: [],\n      total: 0,\n    }\n  }\ncomponentDidMount() {\n  //set state to display cakes on the page\n    this.state.dbRef.on('value', (response) => {\n        const newState = [];\n        const data = response.val();\n        for (let key in data.store) {\n            newState.push({\n                cake: data.store[key],\n                id: key,\n            })\n        }\n        this.setState({\n            cakes: newState,\n        })\n    })\n    //set state to display cakes in user's shopping bag\n    this.state.bagRef.on('value', (response) => {\n    const newBag = [];\n    const dataFromUserBag = response.val();\n   \n      // const number = Object.keys(dataFromUserBag).length;\n      // console.log(number);\n\n    for (let key in dataFromUserBag) {\n      newBag.push({\n        cake: dataFromUserBag[key],\n        id: key,\n        price: dataFromUserBag[key].price\n      })\n    }\n    \n    //Function to map out an array of prices then calculate total price (sum of the array)\n    const newTotal = newBag.map(value => {\n      return value.price;\n    }).reduce((a,b) => a + b, 0);\n\n    this.setState ({\n      userBag: newBag,\n      total: newTotal,\n    \n    })\n  })\n}\n//send data of chosen cakes to store in firebase (users)\nhandleAddToBag = (chosenCake) => {\n  this.state.bagRef.push(chosenCake);\n  \n}\n//remove cake from shopping bag\nremoveCake = (unwantedCakeId) => {\n  this.state.bagRef.child(unwantedCakeId).remove();\n}\n\n//--------------\n  render() {\n    \n    return (\n      <main>\n          <div className=\"wrapper\">\n            <ul className=\"storeCakes\">\n                {this.state.cakes.map(item => {\n                    return (\n                        <li key={item.id}>\n                            <img src={item.cake.image} alt={item.cake.name}/>\n                            <p>{item.cake.name}</p>\n                            <p>${item.cake.price}</p>\n                            <button \n                            onClick={() => this.handleAddToBag(item.cake, item.id)}>\n                            Add to Cart\n                            </button>\n                        </li>\n                    )\n                })}\n            </ul>\n\n            <BagButton \n            handleShowBag={this.props.handleShowBag}\n            userBag={this.state.userBag}  \n            />\n\n            {this.props.isBagShown ? \n            <Bag\n            handleHideBag={this.props.handleHideBag} \n            userBag={this.state.userBag} \n            removeCake={this.removeCake}\n            total={this.state.total} \n            /> : null }\n          </div>\n      </main>\n    );\n  }\n}\n\nexport default Main;","import React from 'react';\n\nconst Footer = () => {\n    return (\n        <footer>\n            <div className=\"wrapper\">\n                <p>Copyright anhthuydang 2020</p>\n            </div>\n        </footer>\n    )\n}\n\n\nexport default Footer;","import React, { Component } from 'react';\n\nimport Header from './Header';\nimport Main from './Main';\nimport Footer from './Footer';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      isBagShown: false,\n      \n    }\n  }\n  \n  handleShowBag = () => {\n    let showBag = true;\n    this.setState ({\n      isBagShown: showBag,\n    })\n  }\n\n  handleHideBag = () => {\n    let hideBag = false;\n    this.setState ({\n      isBagShown: hideBag,\n    })\n  }\n\n  render() {\n    return (\n      <>\n        <Header />\n        <Main \n        isBagShown={this.state.isBagShown}\n        handleShowBag={this.handleShowBag}\n        handleHideBag={this.handleHideBag}/>\n        <Footer />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}